% vgen_process_simulink_model
%
% This script parses the simulink model and extracts the interface signals
% and puts this information in a JSON file.

% Copyright 2019 Flat Earth Inc
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
% PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
% FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
% ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
%
% Ross K. Snider
% Flat Earth Inc
% 985 Technology Blvd
% Bozeman, MT 59718
% support@flatearthinc.com


%% Parse the Simulink Model (currently opened model)
% We parse the model to get the Avalon signals and control registers we need for the Avalon vhdl wrapper
disp(['vgen: Parsing Simulink model: ' mp.model_name '. Please wait until you see the message "vgen: Finished."'])
try
    mp.fastsim_flag = 0;  % turn off fast sim so that the model runs at the system clock rate
    avalon = vgen_get_simulink_block_interfaces(mp);
catch
    % Terminate the compile mode if an error occurs while the model
    % has been placed in compile mode. Otherwise the model will be frozen
    % and you can't quit Matlab
    disp('   ***************************************************************************');
    disp('   Error occurred in function vgen_get_simulink_block_interfaces(mp)');
    disp('   ***************************************************************************');
    cmd = [bdroot,'([],[],[],''term'');'];
    eval(cmd)
end

%% save the specified clock frequencies
avalon.clocks.sample_frequency_Hz   = mp.Fs;
avalon.clocks.sample_period_seconds = mp.Ts;
avalon.clocks.system_frequency_Hz   = mp.Fs_system;
avalon.clocks.system_period_seconds = mp.Ts_system;

%% save the device info
avalon.model_name           = mp.model_name;
avalon.model_abbreviation   = mp.model_abbreviation;
avalon.linux_device_name    = mp.linux_device_name;
avalon.linux_device_version = mp.linux_device_version;

%% Save the avalon structure to a json file and a .mat file
writejson(avalon, [avalon.entity,'.json'])
save([avalon.entity '_avalon'], 'avalon')

%% Generate the Simulink model VHDL code
mp.sim_prompts = 0;    % turn off the simulation prompts and the stop callbacks when running HDL workflow (otherwise this runs at each HDL workflow step)

% XXX: I don't like the dependencies between the hdl codegen scripts
%      and the scripts in the model folder.
sm_hdlworkflow         % run the workflow script

%% Generate the Avalon VHDL wrapper for the VHDL code generated by the HDL Coder
disp('vgen: Creating Avalon VDHL wrapper.')
infile = [avalon.entity '.json'];
outfile = [mp.model_path filesep avalon.entity, '_avalon.vhd'];
vgenAvalonWrapper(infile, outfile, false, false);
disp(['      created vhdl file: ' outfile])

%% Generate the .tcl script to be used by Platform Designer in Quartus
disp('vgen: Creating .tcl script for Platform Designer.')
infile = [avalon.entity '.json'];
% NOTE: platform designer only adds components if they have the _hw.tcl suffix
outfile = [mp.model_path filesep avalon.entity, '_avalon_hw.tcl'];
vgenTcl(infile, outfile, mp.model_path);
disp(['      created tcl file: ' outfile])


disp('vgen: Finished.')

% TODO: reset fast simulation flag so running the model simulation isn't so slow after generating code. 
